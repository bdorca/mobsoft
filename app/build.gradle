buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}
buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: "jacoco"

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "hu.btb.dorka.fleet"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            testCoverageEnabled = true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        productFlavors {
            mock {
                applicationId 'hu.btb.dorka.fleet.mock'
                versionName defaultConfig.versionName + ' Mock'
                buildConfigField 'boolean', 'MOCK', 'true'
            }
            prod {
                applicationId 'hu.btb.dorka.fleet'
                versionName defaultConfig.versionName
                buildConfigField 'boolean', 'MOCK', 'false'
            }
        }

    }
}

jacoco {
    // Use this version for upper ones are broken (with Gradle)
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testMockDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',
                       '**/*$Parcels*.*',
                       '**/*$Parcelable*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testMockDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //FAB
    compile 'com.github.clans:fab:1.6.4'

    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:cardview-v7:25.2.0'

    compile 'com.google.dagger:dagger-compiler:2.0.1'
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'com.android.support:design:25.2.0'

    //Play services
    compile 'com.google.android.gms:play-services-maps:10.2.0'
    compile 'com.google.android.gms:play-services-analytics:10.2.0'

    //Utils
    compile "org.parceler:parceler-api:1.0.3"
    apt "org.parceler:parceler:1.0.3"
    compile 'net.danlew:android.joda:2.9.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.satyan:sugar:1.4'
    compile 'de.greenrobot:eventbus:2.4.0'

    //Retrofit and OkHttp
    compile 'com.squareup.retrofit2:retrofit:2.0.0-beta3'
    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.0.1'
    compile 'com.google.code.gson:gson:2.4'
    compile 'com.jakewharton:butterknife:7.0.1'


    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }


    testCompile 'junit:junit:4.12'


    //Robolectric
    testCompile('org.robolectric:shadows-support-v4:3.0-rc3') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    //Mockito
    testCompile "org.mockito:mockito-core:1.10.19"

    //Dagger
    testCompile 'com.google.dagger:dagger-compiler:2.0.1'
    testCompile 'com.google.dagger:dagger:2.0.1'
    testApt "com.google.dagger:dagger-compiler:2.0.1"
    testCompile 'org.glassfish:javax.annotation:10.0-b28'

    //Android Test
    //Espresso
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.1')
            {
                exclude group: 'com.google.code.findbugs', module: 'jsr305'
            }


    androidTestCompile 'com.android.support:support-annotations:25.2.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    androidTestCompile "org.mockito:mockito-core:1.10.19"

}
apply plugin: 'com.google.gms.google-services'
